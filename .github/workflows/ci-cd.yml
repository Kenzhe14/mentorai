name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19'
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Run tests
        run: yarn test --passWithNoTests
  
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'
          
      - name: Install dependencies
        working-directory: ./server-go
        run: go mod download
        
      - name: Run tests
        working-directory: ./server-go
        run: go test ./... -v
  
  build-and-push:
    needs: [test-frontend, test-backend]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Устанавливаем Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Логин в Docker Hub или приватный реестр
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Создаем .env.production файл
      - name: Create .env.production file
        run: |
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > .env.production
      
      # Сборка и публикация frontend образа
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mentor-frontend:latest
      
      # Сборка и публикация backend образа
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/mentor-backend:latest
  
  deploy:
    needs: build-and-push
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Копируем docker-compose файл на сервер и запускаем
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p ~/mentor-app
            cd ~/mentor-app
            
            # Создаем файл с переменными окружения
            cat > .env << EOF
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOF
            
            # Скачиваем docker-compose.yml
            curl -o docker-compose.yml ${{ secrets.RAW_DOCKER_COMPOSE_URL }}
            
            # Останавливаем и удаляем старые контейнеры, загружаем новые образы
            docker-compose down
            docker-compose pull
            docker-compose up -d
            
            # Очистка неиспользуемых образов
            docker image prune -af 