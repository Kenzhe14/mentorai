version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    restart: always
    environment:
      - PORT=5000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=production
    volumes:
      - backend_uploads:/app/uploads
    expose:
      - "5000"
    depends_on:
      - postgres
    networks:
      - mentor_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: always
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - mentor_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:80"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx service for SSL and routing
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/letsencrypt:/etc/letsencrypt
    depends_on:
      - frontend
      - backend
    networks:
      - mentor_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Database service
  postgres:
    image: postgres:14-alpine
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    networks:
      - mentor_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 5s
      retries: 3

# Define networks
networks:
  mentor_network:
    driver: bridge

# Define volumes
volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local 