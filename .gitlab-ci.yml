stages:
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  FRONTEND_IMAGE: ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_REF_SLUG}
  BACKEND_IMAGE: ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_REF_SLUG}

# Cache dependencies between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - server-go/.go-cache/

# Frontend Jobs
frontend-test:
  stage: test
  image: node:20
  script:
    - yarn install
    - yarn test --watchAll=false
  only:
    changes:
      - src/**/*
      - package.json
      - yarn.lock

frontend-build:
  stage: build
  image: docker:24.0.5-cli
  services:
    - docker:24.0.5-dind
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker build -t ${FRONTEND_IMAGE} -f Dockerfile.frontend .
    - docker push ${FRONTEND_IMAGE}
  only:
    - main
    - staging
  needs:
    - frontend-test

# Backend Jobs
backend-test:
  stage: test
  image: golang:1.21
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
    GOCACHE: $CI_PROJECT_DIR/.go-cache
  script:
    - cd server-go
    - go mod download
    - go test ./... -v
  only:
    changes:
      - server-go/**/*
      - go.mod
      - go.sum

backend-build:
  stage: build
  image: docker:24.0.5-cli
  services:
    - docker:24.0.5-dind
  script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
    - docker build -t ${BACKEND_IMAGE} -f Dockerfile.backend ./server-go
    - docker push ${BACKEND_IMAGE}
  only:
    - main
    - staging
  needs:
    - backend-test

# Deployment Jobs
deploy-staging:
  stage: deploy
  image: alpine:3.19
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo "$STAGING_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $STAGING_SSH_USER@$STAGING_SSH_HOST "
        docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY} &&
        cd /path/to/deployment &&
        docker-compose pull &&
        docker-compose up -d --force-recreate"
  environment:
    name: staging
  only:
    - staging
  needs:
    - frontend-build
    - backend-build

deploy-production:
  stage: deploy
  image: alpine:3.19
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo "$PRODUCTION_SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $PRODUCTION_SSH_USER@$PRODUCTION_SSH_HOST "
        docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY} &&
        cd /path/to/production &&
        docker-compose pull &&
        docker-compose up -d --force-recreate"
  environment:
    name: production
  only:
    - main
  when: manual
  needs:
    - frontend-build
    - backend-build 